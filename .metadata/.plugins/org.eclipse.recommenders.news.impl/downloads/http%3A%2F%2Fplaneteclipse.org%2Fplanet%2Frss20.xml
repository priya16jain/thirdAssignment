<?xml version="1.0"?>
<rss version="2.0">

<channel>
	<title>Planet Eclipse</title>
	<link>http://planeteclipse.org/planet/</link>
	<language>en</language>
	<description>Planet Eclipse - http://planeteclipse.org/planet/</description>

<item>
	<title>Niko Stotz: Inline Display of Error / Warning / Info Annotations in Eclipse</title>
	<guid isPermaLink="false">https://www.nikostotz.de/blog/?p=436</guid>
	<link>https://www.nikostotz.de/blog/inline-display-of-error-warning-info-annotations-in-eclipse/</link>
	<description>&lt;p&gt;&lt;strong&gt;tl;dr:&lt;/strong&gt; A prototype implementation shows all error, warning, and info annotations (“bubbles” in the left ruler) in Eclipse Java editor as inline text. Thus, we don’t have to use the mouse to view the error message. The error messages update live with changes in the editor.&lt;/p&gt;



&lt;figure class=&quot;wp-block-image&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;wp-image-438&quot; src=&quot;https://www.nikostotz.de/blog/wp-content/uploads/2019/05/InlineAnnotationsSmall.gif&quot; /&gt;Screencast showing the live effect&lt;/figure&gt;



&lt;p&gt;I’m an avid keyboard user. If I have to touch the mouse, something is wrong. Eclise has tons of shortcuts to ease your live, and I use and enjoy them every day.&lt;/p&gt;



&lt;p&gt;However, if I had an error message in e.g. my Java file, and I couldn’t anticipate the error, I had several bad choices:&lt;/p&gt;



&lt;ul&gt;&lt;li&gt; Opening the &lt;em&gt;Problems&lt;/em&gt; view and navigating to the current error (entries in the  Problems view are called “markers” by Eclipse)&lt;/li&gt;&lt;li&gt;Moving the mouse over the annotation in the left ruler (“annotation” in Eclipse lingo)&lt;/li&gt;&lt;li&gt;Guessing&lt;/li&gt;&lt;/ul&gt;



&lt;p&gt;Not so long ago, Angelo Zerr and others implemented &lt;a href=&quot;https://github.com/angelozerr/jdt-codemining&quot;&gt;code mining&lt;/a&gt; in Eclipse. This feature displays additional information within a text file without changing the actual contents of the file. Sounds like a natural fit for my problem!&lt;/p&gt;



&lt;p&gt;I first tried to implement the error code mining based on markers, (&lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=540443&quot;&gt;Bug 540443&lt;/a&gt;). This works in general. However, markers are bound to the &lt;em&gt;persisted state&lt;/em&gt; of a file, i.e. how a file is saved to disk. So they are only updated on saving.&lt;/p&gt;



&lt;p&gt;Most editors in Eclipse are more interactive than that: They update their error information based on the &lt;em&gt;dirty state&lt;/em&gt; of the editor, i.e. the text that’s currently in the editor. This feels way more natural, so I tried to rewrite my error code mining based on annotations. The current prototype is shown in above’s screencast.&lt;/p&gt;



&lt;p&gt;The code is attached to &lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=547665&quot;&gt;Bug 547665&lt;/a&gt;. The prototype looks quite promising.&lt;/p&gt;



&lt;p&gt;As above’s screencast shows, I have at least one serious issue to resolve: When the editor is saved, all code minings briefly duplicate. Thankfully, they get back to normal quickly.&lt;/p&gt;



&lt;p&gt;&lt;/p&gt;</description>
	<pubDate>Sun, 26 May 2019 22:11:09 +0000</pubDate>
        <enclosure url="https://www.nikostotz.de/blog/wp-content/uploads/2019/05/InlineAnnotationsSmall.gif" length="2854" type="image/jpeg"/>
</item>
<item>
	<title>Doug Schaefer: Going Straight to clang for WebAssembly</title>
	<guid isPermaLink="false">https://medium.com/p/928df1484430</guid>
	<link>https://medium.com/@dougschaefer/going-straight-to-clang-for-webassembly-928df1484430?source=rss-8f7a70438965------2</link>
	<description>&lt;p&gt;A few years ago at EclipseCon I gave a demo of a C++ app using libSDL2 and showed how you build it with CDT and launch it for multiple platforms, my desktop, a BeagleBone running QNX, and finally in a web browser using Emscripten. I used CMake for the build system and that worked fine for the first two, but Emscripten really fought the idea of something else driving the build. I finally figured it out but it left the impression that there had to be a simpler way to build WebAssembly apps.&lt;/p&gt;&lt;p&gt;Recently with version 8 of clang, they have made the wasm target a first class citizen available with the standard distribution. I thought I’d take a look and &lt;a href=&quot;https://github.com/PetterS/clang-wasm&quot;&gt;found at least one example on github&lt;/a&gt; that showed how. Here’s a quick summary on how to get started. Be warned, though, one of the arguments is nostdlib which means this is a very barebones example. But that’s another area where I think Emscripten has gone a little to far with. More on that later.&lt;/p&gt;&lt;p&gt;To start this example is a pretty basic Fibonacci calculator, pretty standard for WebAssembly. Here’s the C++ file.&lt;/p&gt;&lt;pre&gt;#include “wasm.h”&lt;/pre&gt;&lt;pre&gt;WASM_IMPORT void log(int i);&lt;/pre&gt;&lt;pre&gt;WASM_EXPORT int fib(int i) {&lt;br /&gt;    int res = i &amp;lt;= 1 ? i : fib(i — 1) + fib(i — 2);&lt;br /&gt;    log(res);&lt;br /&gt;    return res;&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;I wanted to show C++ calling back into JavaScript so there’s a very contrived log method we import. The fib function itself is pretty basic. I’ve created a couple of macros in the wasm.h file to manage marking functions as import or export.&lt;/p&gt;&lt;pre&gt;#define WASM_EXPORT __attribute__((visibility(“default”))) \&lt;br /&gt;    extern “C”&lt;br /&gt;#define WASM_IMPORT extern “C”&lt;/pre&gt;&lt;p&gt;Since I’m writing C++ I want to make sure the compiler doesn’t mangle the names so I declare them as extern “C”. As you can see, the export also turns on the visibility of the symbol which is hidden by default in the Makefile.&lt;/p&gt;&lt;p&gt;I’m running this with node.js which has had WebAssembly support since at least version 8 that I have on my Linux box. The idea is to do some of the more computationally expensive tasks in my node server using wasm. Here’s my js file.&lt;/p&gt;&lt;pre&gt;const fs = require(‘fs’)&lt;/pre&gt;&lt;pre&gt;async function run() {&lt;br /&gt;  const buf = fs.readFileSync(‘./fib.wasm’)&lt;br /&gt;  return await WebAssembly.instantiate(buf, {&lt;br /&gt;    ‘env’: {&lt;br /&gt;      ‘log’: function(i) { console.log(`log: ${i}`) }&lt;br /&gt;    }&lt;br /&gt;  })&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;run().then(res =&amp;gt; {&lt;br /&gt;  const { fib } = res.instance.exports&lt;br /&gt;  console.log(fib(10))&lt;br /&gt;})&lt;/pre&gt;&lt;p&gt;It simply loads up the wasm file and instantiates it passing in the log function. When that’s complete, I extract my fib function from the exports and run it. You should see the output of the log function (more times that I was expecting at least), then the result, 55.&lt;/p&gt;&lt;p&gt;As with most things C++, the magic is actually in the Makefile.&lt;/p&gt;&lt;pre&gt;CXX = $(HOME)/wasm/clang-8/bin/clang&lt;br /&gt;CXXFLAGS = \&lt;br /&gt;    -Wall \&lt;br /&gt;    --target=wasm32 \&lt;br /&gt;    -Os \&lt;br /&gt;    -flto \&lt;br /&gt;    -nostdlib \&lt;br /&gt;    -fvisibility=hidden \&lt;br /&gt;    -std=c++14 \&lt;br /&gt;    -ffunction-sections \&lt;br /&gt;    -fdata-sections&lt;/pre&gt;&lt;pre&gt;LD = $(HOME)/wasm/clang-8/bin/wasm-ld&lt;br /&gt;LDFLAGS = \&lt;br /&gt;    --no-entry \&lt;br /&gt;    --strip-all \&lt;br /&gt;    --export-dynamic \&lt;br /&gt;    --initial-memory=131072 \&lt;br /&gt;    -error-limit=0 \&lt;br /&gt;    --lto-O3 \&lt;br /&gt;    -O3 \&lt;br /&gt;    --gc-sections&lt;/pre&gt;&lt;pre&gt;fib.wasm: fib.o&lt;br /&gt;    $(LD) $(LDFLAGS) -o $@ $&amp;lt;&lt;/pre&gt;&lt;p&gt;There’s lots of magic flags here and I have to thank the author of the example I linked above for getting me started. I’ll have to play with them to see what’s actually necessary. The key here is that it isn’t Emscripten but straight clang 8 that I downloaded from llvm.org. There’s no standard library, so don’t go and try and do a printf. You’re a bit on your own for now.&lt;/p&gt;&lt;p&gt;But that’s somewhat a conclusion I reached. Emscripten allows C++ developer to easily port their apps to run on the web. It doesn’t make the C++ developer think like a Web developer. What would be interesting to me is what it would look like if you weren’t handed those fancy libraries you get with Emscripten and really just wanted to build a web app, like a game, using the standard JavaScript APIs you get with node or the browser. I think you’d end up writing programs like an Arduino developer where you don’t have printf either…&lt;/p&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=928df1484430&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 24 May 2019 20:39:43 +0000</pubDate>
</item>
<item>
	<title>Tanja Obradovic: Election time for Jakarta EE Working Group Committees!</title>
	<guid isPermaLink="false">https://blogs.eclipse.org/6703 at https://blogs.eclipse.org</guid>
	<link>https://blogs.eclipse.org/post/tanja-obradovic/election-time-jakarta-ee-working-group-committees</link>
	<description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;p dir=&quot;ltr&quot;&gt;The Jakarta EE Working Group&lt;a href=&quot;https://www.eclipse.org/org/workinggroups/jakarta_ee_charter.php&quot;&gt; charter&lt;/a&gt; identifies three key committees to drive the various facets of the working group for which there are elected positions to be filled: the Steering Committee, the Specification Committee, and the Marketing and Brand Committee.&lt;/p&gt;

&lt;p&gt;The elected positions are to represent each of the Enterprise Members, Participant Members, and Committer Members.  Note that Strategic Members each have a representative appointed to these committees.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;This way, we are announcing that the Foundation will hold elections on behalf of the working group using the proposed timetable listed below. This mimics the process used by other working groups as well as the process used by the Eclipse Foundation itself for filling the elected positions on our Board.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;All members are encouraged to consider nominating someone for the positions, and self-nominations are welcome. The period for nominations will open later this week and will run through June 4th.  Nominations may be sent to elections@eclipse.org.&lt;/p&gt;

&lt;p&gt;Once nominations are closed, we will inform all working group members of the candidates and will distribute ballots via email to those eligible to vote.  The election process will follow the Eclipse “Single Transferable Vote” method, as defined in the Eclipse&lt;a href=&quot;https://www.eclipse.org/org/documents/&quot;&gt; Bylaws&lt;/a&gt;.  &lt;/p&gt;

&lt;p&gt;The winning candidates will be announced on this mailing list immediately after the elections are concluded.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;u&gt;Election Schedule&lt;/u&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;em&gt;Nomination period:  &lt;strong&gt;May 24 - June 4 &lt;/strong&gt;(self-nominations are welcome)&lt;/em&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;em&gt;Election period: &lt;strong&gt; June 11 - June 25&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;em&gt;Winning candidates announced: &lt;strong&gt; June 27&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;The following positions will be filled as part of this election:&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Steering Committee&lt;/strong&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;Two seats allocated for Enterprise Members&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;One seat allocated for Participant Members&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;One seat allocated for Committer Members&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Specification Committee&lt;/strong&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;Two seats allocated for Enterprise Members&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;One seat allocated for Participant Members&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;One seat allocated for Committer Members&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Marketing and Brand Committee&lt;/strong&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;Two seats allocated for Enterprise Members&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;One seat allocated for Participant Members&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;One seat allocated for Committer Members&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-blog-tags field-type-taxonomy-term-reference field-label-above&quot;&gt;&lt;div class=&quot;field-label&quot;&gt;Tags: &lt;/div&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/jakartaee-javaee-eclipsefdn&quot;&gt;#JakartaEE #JavaEE #EclipseFdn&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Fri, 24 May 2019 10:02:19 +0000</pubDate>
</item>
<item>
	<title>vert.x project: Eclipse Vert.x 3.7.1</title>
	<guid isPermaLink="true">https://vertx.io/blog/eclipse-vert-x-3-7-1</guid>
	<link>https://vertx.io/blog/eclipse-vert-x-3-7-1</link>
	<description>&lt;article&gt;&lt;p&gt;We have just released Vert.x 3.7.1, a bug fix release of Vert.x 3.7.x and a few small features.&lt;/p&gt;
&lt;p&gt;Since the release of Vert.x 3.7.0, quite a few bugs have been reported. We would like to thank you all for reporting these issues.&lt;/p&gt;
&lt;p&gt;In addition of bug fixes, this release prepares the ground for Vert.x 4 with a few enhancements and deprecations.&lt;/p&gt;
&lt;h3 id=&quot;http-client-unix-domain-sockets&quot;&gt;HTTP client Unix Domain Sockets&lt;/h3&gt;
&lt;p&gt;Since this release the &lt;code&gt;HttpClient&lt;/code&gt; supports &lt;a href=&quot;https://en.wikipedia.org/wiki/Unix_domain_socket&quot;&gt;Unix Domain Sockets&lt;/a&gt; when using
Netty’s native transports, which can be really useful if you need to connect to a local daemon such as Docker’s Daemon:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;HttpClient httpClient = vertx.createHttpClient();

&lt;span class=&quot;hljs-comment&quot;&gt;// Only available on BSD and Linux with native transport&lt;/span&gt;
SocketAddress addr = SocketAddress.domainSocketAddress(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/var/tmp/myservice.sock&quot;&lt;/span&gt;);

&lt;span class=&quot;hljs-comment&quot;&gt;// Send request to the server&lt;/span&gt;
httpClient.request(HttpMethod.GET, addr, &lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;localhost&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;/&quot;&lt;/span&gt;, resp -&amp;gt; {
  &lt;span class=&quot;hljs-comment&quot;&gt;// Process response&lt;/span&gt;
}).end();&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;http-client-websocket-connect-revisited&quot;&gt;HTTP client WebSocket connect revisited&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;HttpClient&lt;/code&gt; WebSocket methods have been revisited, indeed these methods were lacking of usability in general or
with vertx-rx due to the optional error handling:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;HttpClient client = vertx.createHttpClient();
client.websocket(&lt;span class=&quot;hljs-number&quot;&gt;80&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;example.com&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;/&quot;&lt;/span&gt;, websocket -&amp;gt; {
  &lt;span class=&quot;hljs-comment&quot;&gt;// connected&lt;/span&gt;
});

&lt;span class=&quot;hljs-comment&quot;&gt;// or&lt;/span&gt;

client.websocket(&lt;span class=&quot;hljs-number&quot;&gt;80&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;example.com&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;/&quot;&lt;/span&gt;, websocket -&amp;gt; {
  &lt;span class=&quot;hljs-comment&quot;&gt;// connected&lt;/span&gt;
}, err -&amp;gt; {
  &lt;span class=&quot;hljs-comment&quot;&gt;// handle error&lt;/span&gt;
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The new &lt;code&gt;webSocket&lt;/code&gt; method provides now the best developer experience for connecting a WebSocket:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;HttpClient client = vertx.createHttpClient();
client.webSocket(&lt;span class=&quot;hljs-number&quot;&gt;80&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;example.com&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;/&quot;&lt;/span&gt;, ar -&amp;gt; {
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ar.succeeded()) {
    &lt;span class=&quot;hljs-comment&quot;&gt;// connected&lt;/span&gt;
  } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
    &lt;span class=&quot;hljs-comment&quot;&gt;// handler error&lt;/span&gt;
  }
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With RxJava2, you can use now:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;HttpClient client = vertx.createHttpClient();
Single single = client.rxWebSocket(&lt;span class=&quot;hljs-number&quot;&gt;80&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;example.com&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;/&quot;&lt;/span&gt;);
single.subscribe(
  ws -&amp;gt; {
    &lt;span class=&quot;hljs-comment&quot;&gt;// connected&lt;/span&gt;
  },
  err -&amp;gt; {
    &lt;span class=&quot;hljs-comment&quot;&gt;// handle error&lt;/span&gt;
  });&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;vert-x-rx-usability-improvements&quot;&gt;Vert.x Rx usability improvements&lt;/h3&gt;
&lt;p&gt;As you may know, the &lt;a href=&quot;http://vertx.io/docs/vertx-rx/java2/#_rxified_api&quot;&gt;Vert.x &lt;em&gt;Rxified&lt;/em&gt; API&lt;/a&gt; is generated from the bare Vert.x API.&lt;/p&gt;
&lt;p&gt;In this release, &lt;code&gt;vertx-codegen&lt;/code&gt; has been improved to determine if an API object is an &lt;code&gt;Iterable&lt;/code&gt;, &lt;code&gt;Iterator&lt;/code&gt;, or &lt;code&gt;Function&lt;/code&gt;.
Then its &lt;em&gt;Rxified&lt;/em&gt; equivalent will be an &lt;code&gt;Iterable&lt;/code&gt;, &lt;code&gt;Iterator&lt;/code&gt;, or &lt;code&gt;Function&lt;/code&gt; too.&lt;/p&gt;
&lt;p&gt;Let’s take an example.
The Vert.x &lt;code&gt;MultiMap&lt;/code&gt; class represents a multi-map of &lt;code&gt;String&lt;/code&gt; keys to a list of &lt;code&gt;String&lt;/code&gt; values.
It’s useful to represent things like HTTP headers and parameters which allow multiple values for keys.&lt;/p&gt;
&lt;p&gt;Since the bare &lt;code&gt;io.vertx.core.MultiMap&lt;/code&gt; implements &lt;code&gt;Iterable&amp;gt;&lt;/code&gt;, you can iterate through the content with a &lt;code&gt;for-each&lt;/code&gt; loop.
Starting with 3.7.1, the same is possible with the &lt;em&gt;Rxified&lt;/em&gt; version:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;io.vertx.reactivex.core.MultiMap headers = request.headers();
&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Entry header : headers) {
  &lt;span class=&quot;hljs-comment&quot;&gt;// inspect header  &lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or, for advanced transformations:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;Flowable&amp;gt; headers = Flowable.fromIterable(request.headers());&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;graphiql-ide&quot;&gt;GraphiQL IDE&lt;/h3&gt;
&lt;p&gt;Vert.x 3.7.0 added support for building &lt;a href=&quot;https://vertx.io/docs/vertx-web-graphql/java/&quot;&gt;GraphQL servers&lt;/a&gt; with Vert.x Web and &lt;a href=&quot;http://graphql-java.com/&quot;&gt;GraphQL-Java&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In 3.7.1, the GraphQL handler can be configured to expose the GraphiQL IDE:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;GraphQLHandlerOptions options = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; GraphQLHandlerOptions()
  .setGraphiQLOptions(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; GraphiQLOptions()
    .setEnabled(&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;)
  );

router.route(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/graphql&quot;&lt;/span&gt;).handler(GraphQLHandler.create(graphQL, options));&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;vert-x-3-8-0-is-the-next-release&quot;&gt;Vert.x 3.8.0 is the next release&lt;/h3&gt;
&lt;p&gt;The next version of Vert.x will be 3.8 and targets end of June / early July with the following themes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Introducing a Promise interface to be used instead of Future in a couple of places of the codebase such as &lt;code&gt;Verticle&lt;/code&gt; start or
&lt;code&gt;executeBlocking&lt;/code&gt;. The goal is to move the completion part in Vert.x 4 from &lt;code&gt;Future&lt;/code&gt; to &lt;code&gt;Promise&lt;/code&gt; which becomes the object to be
completed and &lt;code&gt;Future&lt;/code&gt; is a view that is consumed by clients&lt;/li&gt;
&lt;li&gt;Json Pointer support&lt;/li&gt;
&lt;li&gt;The new SQL client will be released as tech preview (until v4)&lt;/li&gt;
&lt;li&gt;RedisPool as tech preview (until v4) bring back connection management, lazy reconnect and scaling to all client modes (Single, Sentinel and Cluster)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Vert.x 3.7.1 release notes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.7.1-Release-Notes&quot;&gt;https://github.com/vert-x3/wiki/wiki/3.7.1-Release-Notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Vert.x 3.7.1 deprecations and breaking changes&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.7.1-Deprecations-and-breaking-changes&quot;&gt;https://github.com/vert-x3/wiki/wiki/3.7.1-Deprecations-and-breaking-changes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The event bus client using the SockJS bridge are available from NPM, Bower and as a WebJar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/vertx3-eventbus-client&quot;&gt;https://www.npmjs.com/package/vertx3-eventbus-client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/vertx-bus-bower&quot;&gt;https://github.com/vert-x3/vertx-bus-bower&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.webjars.org/&quot;&gt;http://www.webjars.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Docker images are also available on the &lt;a href=&quot;https://hub.docker.com/u/vertx/&quot;&gt;Docker Hub&lt;/a&gt;. The Vert.x distribution is also available from &lt;a href=&quot;http://sdkman.io/index.html&quot;&gt;SDKMan&lt;/a&gt; and &lt;a href=&quot;http://brew.sh/&quot;&gt;HomeBrew&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The artifacts have been deployed to &lt;a href=&quot;http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.vertx%22%20AND%20v%3A%223.6.3%22&quot;&gt;Maven Central&lt;/a&gt; and you can get the distribution on &lt;a href=&quot;https://bintray.com/vertx/downloads/distribution/3.7.1/view&quot;&gt;Bintray&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy coding and see you soon on our user or dev &lt;a href=&quot;https://vertx.io/community&quot;&gt;channels&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;</description>
	<pubDate>Fri, 24 May 2019 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Thabang Mashologu: ECE 2019: CFP Now Open!</title>
	<guid isPermaLink="false">https://blogs.eclipse.org/6702 at https://blogs.eclipse.org</guid>
	<link>https://blogs.eclipse.org/post/thabang-mashologu/ece-2019-cfp-now-open</link>
	<description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;p&gt;EclipseCon Europe is the leading conference for developers, architects, and open source business leaders to learn about Eclipse technologies, share best practices, and more. Taking in place in Ludwigsburg, Germany, October 21-24, 2019, ECE 2019 is our biggest event of the year and connects the Eclipse ecosystem and the industry’s leading minds under one roof. We are pleased to once again co-locate with the OSGi Alliance Community Event, adding more breadth and expertise to the program.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;The ECE 2019 Call for Papers is now open. Please visit the &lt;a href=&quot;https://www.eclipsecon.org/europe2019/cfp&quot;&gt;CFP page&lt;/a&gt; for information on how to submit your talk. This year, the early-bird submission deadline is July 1 and the final submission deadline is July 15. &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;If you have an idea for a talk that will educate and inspire the Eclipse community, we would love to hear from you! &lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-blog-tags field-type-taxonomy-term-reference field-label-above&quot;&gt;&lt;div class=&quot;field-label&quot;&gt;Tags: &lt;/div&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/eclipsecon&quot;&gt;EclipseCon&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/community&quot;&gt;Community&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/cfp&quot;&gt;cfp&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Wed, 22 May 2019 09:47:54 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Cloud Native Java Innovation at the Eclipse Foundation</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/aBdlEIvQ0Ik/cloud-native-java-innovation-eclipse-foundation</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/aBdlEIvQ0Ik/cloud-native-java-innovation-eclipse-foundation</link>
	<description>The world's leading technology vendors, including Fujitsu, IBM, Microsoft, Oracle, Red Hat, SAP, and Tomitribe, are collaborating at the Eclipse Foundation to advance enterprise Java technologies to support the migration of mission-critical applications to the cloud.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/aBdlEIvQ0Ik&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Tue, 21 May 2019 13:30:00 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: ECE 2019: CFP Now Open!</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/VZlk1gBdWVs/ece-2019-cfp-now-open</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/VZlk1gBdWVs/ece-2019-cfp-now-open</link>
	<description>The ECE 2019 Call for Papers is now open. The early-bird deadline is July 1 and final submission is July 15.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/VZlk1gBdWVs&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Tue, 21 May 2019 13:30:00 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Update for Jakarta EE community: May 2019</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/G8K0XFfE9p0/update-jakarta-ee-community-may-2019</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/G8K0XFfE9p0/update-jakarta-ee-community-may-2019</link>
	<description>Active participation represents the best way to drive the vendor-neutral and rapid innovation necessary to modernize enterprise systems for cloud use cases.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/G8K0XFfE9p0&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Tue, 21 May 2019 13:30:00 +0000</pubDate>
</item>
<item>
	<title>Thabang Mashologu: Cloud Native Java Innovation at the Eclipse Foundation</title>
	<guid isPermaLink="false">https://blogs.eclipse.org/6701 at https://blogs.eclipse.org</guid>
	<link>https://blogs.eclipse.org/post/thabang-mashologu/cloud-native-java-innovation-eclipse-foundation</link>
	<description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;p dir=&quot;ltr&quot;&gt;The world’s leading technology vendors, including Fujitsu, IBM, Microsoft, Oracle, Red Hat, SAP, and Tomitribe, are collaborating at the &lt;a href=&quot;https://www.eclipse.org/&quot;&gt;Eclipse Foundation&lt;/a&gt; to advance enterprise Java technologies to support the migration of mission-critical applications to the cloud. &lt;a href=&quot;https://jakarta.ee/&quot;&gt;Jakarta EE&lt;/a&gt; and &lt;a href=&quot;https://microprofile.io/&quot;&gt;Eclipse MicroProfile&lt;/a&gt; offer a path for migrating Java EE legacy applications to a standard enterprise Java stack for a cloud native world. Within the collaborative, vendor-neutral environment provided by the Eclipse Foundation, a vibrant community of developers is directly influencing the future of Java.&lt;/p&gt;

&lt;p&gt;Establishing Jakarta EE as the place where Java EE will evolve to create this migration path to the cloud is a significant effort, and the community involved in supporting this effort have made tremendous strides. These have included releasing &lt;a href=&quot;https://www.globenewswire.com/news-release/2019/01/29/1706637/0/en/Java-EE-8-Compatible-Eclipse-GlassFish-5-1-Released.html&quot;&gt;Eclipse GlassFish&lt;/a&gt; 5.1 as Java EE 8 certified, thus ensuring backward compatibility, and establishing an open specification process as a replacement for the JCP. Next up is to release Jakarta EE 8 as an established specification and see the commercial vendors support this release, again ensuring the migration path forward. As this happens, all developers are encouraged to participate as Jakarta EE then evolves. The first step in doing this is to join the conversation by visiting &lt;a href=&quot;https://jakarta.ee/connect/&quot;&gt;https://jakarta.ee/connect/&lt;/a&gt;.   &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3 dir=&quot;ltr&quot;&gt;&lt;strong&gt;Jakarta EE Developer Survey Results Show Cloud Native Adoption Accelerating Dramatically with Jakarta EE&lt;/strong&gt;&lt;/h3&gt;

&lt;p dir=&quot;ltr&quot;&gt; &lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;The Eclipse Foundation recently released the &lt;a href=&quot;http://bit.ly/2VaHkTH&quot;&gt;2019 Jakarta EE Developer Survey&lt;/a&gt; that canvassed nearly 1,800 Java developers about their adoption of Jakarta EE and trends in Java programming. The goal of the survey, which was conducted in March 2019, was to help Java ecosystem stakeholders better understand the requirements, priorities, and perceptions of enterprise Java developer communities.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;The findings indicate that cloud native is critically important with a third of developers currently building cloud native architectures and another 30 percent planning to within the next year. Meanwhile, the number of Java applications running in the cloud is projected to increase significantly over the next two years, with 32 percent of respondents expecting that they will be running nearly two-thirds of their Java applications in the cloud in two years. Furthermore, 43 percent of respondents consider the microservices architecture the dominant approach to implementing Java in the cloud.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;While Spring and Spring Boot continue to dominate as the leading framework for building cloud native applications in Java, Eclipse MicroProfile’s usage growth more than doubled in adoption from 13 percent in 2018 to 28 percent today.   &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;Survey respondents made it clear that as the community-driven evolution of enterprise Java coalesces around Jakarta EE, Java EE remains the platform they rely on most to build enterprise-class applications. According to the results, the top three community priorities for Jakarta EE are a tie at first with better support for microservices and native integration with Kubernetes (both at 61 percent) followed by product quality reference implementation (37 percent).&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt; &lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;Access the full findings of the 2019 Java Community Developer Survey &lt;a href=&quot;http://bit.ly/2VaHkTH&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 dir=&quot;ltr&quot;&gt; &lt;/h3&gt;

&lt;h3 dir=&quot;ltr&quot;&gt;&lt;strong&gt;Key Eclipse Projects for Cloud Native Application Development&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;In addition to Jakarta EE and MicroProfile, the Eclipse community is driving cloud native innovation with the following projects:&lt;/p&gt;

&lt;ul&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;p dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://www.eclipse.org/ide/&quot;&gt;Eclipse IDE&lt;/a&gt; — As the leading open platform for professional developers, the standard Eclipse IDE is the critical development environment for more than 4 million active users. The Eclipse IDE was chosen by the Java developer community as the top IDE for building cloud native applications in the 2019 Jakarta EE Developer Survey.&lt;/p&gt;
	&lt;/li&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;p dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://www.eclipse.org/openj9/&quot;&gt;Eclipse OpenJ9&lt;/a&gt; — OpenJ9 is a Java virtual machine (JVM), the engine that runs Java applications, optimized for the cloud and microservices. OpenJ9 comes with improvements to memory overhead and startup times, achieved through shared classes and an aggressive focus on memory footprint.&lt;/p&gt;
	&lt;/li&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;p dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://vertx.io/&quot;&gt;Eclipse Vert.x&lt;/a&gt; — Vert.x is a toolkit for building reactive applications on the JVM.&lt;/p&gt;
	&lt;/li&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;p dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://projects.eclipse.org/proposals/eclipse-jemo-cloud-application-runtime&quot;&gt;Eclipse Jemo&lt;/a&gt; — Jemo is the leading open source multi-cloud function-as-a-service (FaaS) runtime for JVM based languages. Built to take advantage of Kubernetes, Jemo provides a platform, frameworks, and runtime support for building cloud native applications which run across multiple clouds without the need for re-engineering.&lt;/p&gt;
	&lt;/li&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;p dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://www.theia-ide.org/&quot;&gt;Eclipse Theia&lt;/a&gt; — Theia is an extensible open-source framework to develop multi-language IDEs for the cloud and desktop using state-of-the-art web technologies.&lt;/p&gt;
	&lt;/li&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;p dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://www.eclipse.org/che/&quot;&gt;Eclipse Che&lt;/a&gt; — Che is a next-generation developer workspace server and cloud IDE that allows anyone to contribute to a project without installing any software. Che defines workspaces that include their dependencies including embedded containerized runtimes (including Kubernetes, OpenShift, and Docker support), Web IDE (based on Theia), and project code. This enables true team-based development by making workspaces distributed, collaborative, and portable.&lt;/p&gt;
	&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 dir=&quot;ltr&quot;&gt; &lt;/h3&gt;

&lt;h3 dir=&quot;ltr&quot;&gt;&lt;strong&gt;How to Participate in the Future Of Cloud Native Java&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;To learn more about the collaborative efforts to build tomorrow’s enterprise Java platform for the cloud, check out the &lt;a href=&quot;https://jakartablogs.ee/&quot;&gt;Jakarta Blogs&lt;/a&gt; and participate in the monthly &lt;a href=&quot;https://www.meetup.com/jakartatechtalks_/&quot;&gt;Jakarta Tech Talks&lt;/a&gt;. Don’t forget to subscribe to the Eclipse &lt;a href=&quot;https://www.eclipse.org/community/eclipse_newsletter/&quot;&gt;newsletter&lt;/a&gt; and get involved in Jakarta EE, Eclipse MicroProfile and other cloud native Eclipse projects.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-blog-tags field-type-taxonomy-term-reference field-label-above&quot;&gt;&lt;div class=&quot;field-label&quot;&gt;Tags: &lt;/div&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/jakarta-ee&quot;&gt;Jakarta EE&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/microprofile&quot;&gt;MicroProfile&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/microservices&quot;&gt;microservices&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/faas&quot;&gt;FaaS&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/eclipse-che&quot;&gt;eclipse che&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/kubernetes&quot;&gt;kubernetes&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/cloud-native&quot;&gt;cloud native&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/kubecon-europe-2019&quot;&gt;KubeCon Europe 2019&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Tue, 21 May 2019 06:02:36 +0000</pubDate>
</item>
<item>
	<title>Tanja Obradovic: Update for Jakarta EE community: May 2019</title>
	<guid isPermaLink="false">https://blogs.eclipse.org/6700 at https://blogs.eclipse.org</guid>
	<link>https://blogs.eclipse.org/post/tanja-obradovic/update-jakarta-ee-community-may-2019</link>
	<description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;p dir=&quot;ltr&quot;&gt;The Jakarta EE community is the driving force behind the future of cloud-native Java. Active participation represents the best way to drive the vendor-neutral and rapid innovation necessary to modernize enterprise systems for cloud use cases. That said, we’d like to make sure that the community is kept up-to-speed with the latest developments in the Jakarta EE ecosystem.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;We’re launching a monthly email update for the Jakarta EE community which seeks to highlight news from various committee meetings related to this platform. There are a few ways to get a grip on the work that has been invested in Jakarta EE so far, so if you’d like to learn more about Jakarta EE-related plans and get involved in shaping the future of cloud-native Java, read on. We’d also like to use this opportunity to invite you to get involved in EE4J projects and join the conversation around the Jakarta EE Platform.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;Without further ado, let’s have a look at what has happened this month:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update on Jakarta EE Rights to Java Trademarks&lt;/strong&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;The process of migrating Java EE to the Eclipse Foundation has been a collaborative effort between the Eclipse Foundation staff and the many contributors, committers, members, and stakeholders that are participating. The Eclipse Foundation and Oracle have agreed that the &lt;em&gt;javax &lt;/em&gt;package namespace will not be evolved by the Jakarta EE community. Furthermore, Java trademarks such as the existing specification names will not be used by Jakarta EE specifications.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;Since the ratified Jakarta EE specifications will be available under a different license (the Eclipse Foundation Specification License), we recommend that you update your contributor and committer agreements.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;Read more about the implications and what’s next for the Jakarta EE Working Group in Mike Milinkovich’s latest &lt;a href=&quot;https://eclipse-foundation.blog/2019/05/03/jakarta-ee-java-trademarks/&quot;&gt;blog&lt;/a&gt;.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;In order to evolve Jakarta EE, we must transition to a new namespace. In an effort to bootstrap the conversation, the Jakarta EE Specification Committee has prepared &lt;a href=&quot;https://docs.google.com/document/d/16xHv34J_r7pA5ZsXg3O0eVAZiC12vVkqWnIqWsoUL74/edit&quot;&gt;two proposals&lt;/a&gt; (Big-bang Jakarta EE 9, Jakarta EE 10 new features and incremental change in Jakarta EE 9 and beyond) on how to make the move into the new namespace smoother. These proposals represent a starting point, but the community is warmly invited to submit more proposals.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;&lt;a href=&quot;https://accounts.eclipse.org/mailing-list/jakartaee-platform-dev&quot;&gt;Community discussion&lt;/a&gt; on how to transition to the jakarta namespace will conclude Sunday, June 9th, 2019.&lt;/strong&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;EFSP v1.1&lt;/strong&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://www.eclipse.org/projects/efsp/&quot;&gt;Version 1.1&lt;/a&gt; of the Eclipse Foundation Specification Process was approved on March 20, 2019. The EFSP leverages and augments the Eclipse Development Process (EDP), which defines important concepts, including the Open Source Rules of Engagement, the organizational framework for open source projects and teams, releases, reviews, and more.&lt;br /&gt;
 &lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;JESP v1.0&lt;/strong&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://jakarta.ee/about/jesp/&quot;&gt;Jakarta EE Specification Process v1.0&lt;/a&gt; was approved on April 3, 2019. Therefore, the Jakarta EE Specification Committee now adopts the EFSP v1.1 as the Jakarta EE Specification Process with a few modifications, including the fact that any changes or revisions of the Jakarta EE Specification Process must be approved by a Super-majority of the Specification Committee.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;TCK process:&lt;/strong&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;Work on the TCK process is in progress, with Tomitribe CEO David Blevins leading the effort. The TCK process is expected to be completed in the near future. The document will shed light on aspects such as the materials a TCK must possess in order to be considered suitable for delivering portability, the process for challenging tests and how to resolve them and more.      &lt;br /&gt;
 &lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Jakarta EE 8 release&lt;/strong&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;Jakarta EE 8 is a highly-anticipated release, especially since it represents the first release that’s completely based on Java EE to ensure backward compatibility. It relies on four pillars of work, namely specifications for the full platform, TCKs, including documents on how to use them, a compatible implementation for the release of Jakarta EE 8, and marketing aspects such as branding, logo usage guidelines, and marketing and PR activities.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/CRB1UtCT5JqCFpw8pBmmSfOr22F5Z__I4jZEPM6Yzn1SNg3ZN2krNe73RcP87YN5sgS1pubdbdUqfqfwt6G7vCkSMJ8JjcezIWotC0SMQS_HXBK72TsdHAtwdPyrpSP_xynx_-G0&quot; style=&quot;height: 200px; width: 624px;&quot; /&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;All parties involved are far along with the planning process and work on specifications has already started. Please look at &lt;a href=&quot;https://waynebeaton.wordpress.com/&quot;&gt;Wayne Beaton’s blogs&lt;/a&gt; on the work in progress with regard to specification project names and specification scopes.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;EE4J GitHub&lt;/strong&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;Get involved in &lt;a href=&quot;https://github.com/eclipse-ee4j/&quot;&gt;Eclipse EE4J&lt;/a&gt;! There are currently &lt;a href=&quot;https://github.com/orgs/eclipse-ee4j/projects&quot;&gt;three projects&lt;/a&gt; that you can be a part of, namely Specification Document Names, Jakarta Specification Project Names, and &lt;a href=&quot;https://waynebeaton.wordpress.com/2019/04/08/specification-scope-in-jakarta-ee/&quot;&gt;Jakarta Specification Scope Statements&lt;/a&gt; (for the specifications). Furthermore, there are plenty of &lt;a href=&quot;https://github.com/eclipse-ee4j/&quot;&gt;repos&lt;/a&gt; that require your attention and involvement.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;But before you dive right in, you should read the &lt;a href=&quot;https://www.eclipse.org/ee4j/news/?date=2019-04-23&quot;&gt;latest blog&lt;/a&gt; from the Jakarta EE Specification committee, which recently approved a handful of naming standards for Jakarta EE Specification projects. While you’re at it, you should read Wayne Beaton’s&lt;a href=&quot;https://waynebeaton.wordpress.com/2019/04/04/renaming-java-ee-specifications-for-jakarta-ee/&quot;&gt; blog&lt;/a&gt; on why changing the names of the specifications and the projects that contain their artifacts is a necessary step.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;Head over to GitHub and &lt;a href=&quot;https://github.com/orgs/eclipse-ee4j/projects&quot;&gt;join&lt;/a&gt; the conversation!&lt;br /&gt;
 &lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Jakarta EE Platform&lt;/strong&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;There’s no better time to get involved in the work for the &lt;a href=&quot;https://projects.eclipse.org/projects/ee4j.jakartaee-platform&quot;&gt;Jakarta EE Platform&lt;/a&gt; than the present. As of now, the projects that demand the community’s attention are the Jakarta EE 8 Platform Specification, which is meant to keep track of the work involved with creating the platform specification for Jakarta EE 8, Jakarta EE 9 Platform Specification, intended to keep track of the work involved with creating the platform specification for Jakarta EE 9 and Jakarta EE.Next Roadmap Planning, which seeks to define a roadmap and plan for the Jakarta EE 9 release.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Community Engagement&lt;/strong&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;Speaking of community engagement, there are a few ways to get a grip on the work that has been invested in Jakarta EE so far, learn more about Jakarta EE-related plans and get involved in shaping the future of cloud-native Java. One way to do that is by reading Tanja Obradovic’s &lt;a href=&quot;https://blogs.eclipse.org/blogs/tanja-obradovic&quot;&gt;blog series&lt;/a&gt; on how to get involved.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;You should also be aware of the newly-created &lt;a href=&quot;https://calendar.google.com/calendar/embed?src=eclipse-foundation.org_3281qms6riu4kdf354jn5idon0%40group.calendar.google.com&amp;amp;ctz=America%2FToronto&quot;&gt;Jakarta EE community calendar&lt;/a&gt;, which is now open to the public and offers an overview of all the activities surrounding Jakarta EE. The community is invited to participate in Jakarta Tech Talks, which take place on a monthly basis, attend Jakarta EE Update monthly calls (the next one is on May 8), help build the &lt;a href=&quot;https://wiki.eclipse.org/Jakarta_EE&quot;&gt;Jakarta EE wiki&lt;/a&gt; with all relevant links and look for opportunities to engage and become part of the community.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;Last but not least, the Jakarta EE Developer Survey will be released in the next few days. Head over to &lt;a href=&quot;https://jakarta.ee/&quot;&gt;jakarta.ee&lt;/a&gt; to discover the latest trends, the community’s top priorities regarding the future of Jakarta EE and more. Stay tuned!&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;Conclusion:&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;Thank you for your interest in Jakarta EE. To help us build tomorrow’s enterprise Java platform, join the &lt;a href=&quot;http://www.jakarta.ee/&quot;&gt;Jakarta EE community&lt;/a&gt; now or get involved by becoming a contributor or committer to one of the &lt;a href=&quot;https://projects.eclipse.org/projects/ee4j&quot;&gt;EE4J projects&lt;/a&gt;.   &lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;Help steer Jakarta EE toward its exciting future by joining the &lt;a href=&quot;https://www.eclipse.org/org/workinggroups/jakarta_ee_charter.php&quot;&gt;Jakarta EE working group&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-blog-tags field-type-taxonomy-term-reference field-label-above&quot;&gt;&lt;div class=&quot;field-label&quot;&gt;Tags: &lt;/div&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/jakartaee-javaee-java-eclipsefdn&quot;&gt;#JakartaEE #JavaEE #Java #EclipseFdn&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Sat, 18 May 2019 10:46:43 +0000</pubDate>
</item>
<item>
	<title>Maximilian and Jonas: One size fits all – Rendering Material Design with React and Angular</title>
	<guid isPermaLink="false">https://eclipsesource.com/?p=41632</guid>
	<link>https://eclipsesource.com/blogs/2019/05/17/one-size-fits-all-rendering-material-design-with-react-and-angular/</link>
	<description>&lt;p&gt;JSON Forms is a framework for efficiently developing form-based UIs based on JSON Schema. It provides a simple declarative JSON-based language...&lt;/p&gt;&lt;p&gt;The post &lt;a href=&quot;https://eclipsesource.com/blogs/2019/05/17/one-size-fits-all-rendering-material-design-with-react-and-angular/&quot; rel=&quot;nofollow&quot;&gt;One size fits all – Rendering Material Design with React and Angular&lt;/a&gt; appeared first on &lt;a href=&quot;https://eclipsesource.com&quot; rel=&quot;nofollow&quot;&gt;EclipseSource&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Fri, 17 May 2019 09:52:03 +0000</pubDate>
</item>
<item>
	<title>Andrey Loskutov: Incompatible Eclipse workspaces</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-342159971341432126.post-3852949671843488587</guid>
	<link>http://javaclipse.blogspot.com/2019/05/incompatible-eclipse-workspaces.html</link>
	<description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;Eclipse has mechanism to recognize if the workspace to be used is created with older Eclipse version.&lt;br /&gt;In such case, to be safe, Eclipse shows dialog like:&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;https://2.bp.blogspot.com/-bzIVjTZG780/XN0sZj-ZbJI/AAAAAAAAjw0/FA3w7k-vlLwAkttD9rsM3asrAl0w8cW-ACLcBGAs/s1600/old_workspace_warning.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;https://2.bp.blogspot.com/-bzIVjTZG780/XN0sZj-ZbJI/AAAAAAAAjw0/FA3w7k-vlLwAkttD9rsM3asrAl0w8cW-ACLcBGAs/s1600/old_workspace_warning.png&quot; /&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;As of today (Eclipse 4.12 M1), if you click on &quot;Cancel&quot; button, Eclipse will behave differently, depending on the use cases &quot;history&quot;:&lt;br /&gt;&lt;br /&gt;&lt;h4 style=&quot;text-align: left;&quot;&gt;A. If the workbench was not started yet:&lt;/h4&gt;&lt;ol style=&quot;text-align: left;&quot;&gt;&lt;li&gt;If Eclipse was started &lt;b&gt;without&lt;/b&gt; &quot;-data&quot; argument and user selects incompatible workspace, Eclipse will show &quot;Older Workspace Version&quot; dialog above and by clicking on &quot;Cancel&quot; it will offer workspace selection dialog.&lt;/li&gt;&lt;li&gt;If Eclipse was started &lt;b&gt;with&lt;/b&gt; &quot;-data&quot; argument pointing to the incompatible workspace, Eclipse will show &quot;Older Workspace Version&quot; dialog above and by clicking on &quot;Cancel&quot; it will &lt;span style=&quot;color: red;&quot;&gt;terminate&lt;/span&gt; (instead of offering to select another workspace).&lt;/li&gt;&lt;/ol&gt;&lt;h4 style=&quot;text-align: left;&quot;&gt;B. If the workbench was started:&lt;/h4&gt;&lt;ol style=&quot;text-align: left;&quot;&gt;&lt;li&gt;If user selects &lt;b&gt;compatible&lt;/b&gt; workspace in the &quot;File -&amp;gt; Switch Workspace&quot; dialog, Eclipse restarts fine.&lt;/li&gt;&lt;li&gt;If user selects &lt;b&gt;incompatible&lt;/b&gt; workspace in the &quot;File -&amp;gt; Switch Workspace&quot; dialog, Eclipse restarts, shows the &quot;Older Workspace Version&quot; dialog above and by clicking on &quot;Cancel&quot; it will &lt;span style=&quot;color: red;&quot;&gt;terminate&lt;/span&gt; (instead of offering to select another workspace).&lt;/li&gt;&lt;/ol&gt;This behavior is inconvenient (at least), so we have &lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=538830&quot;&gt;bug 538830&lt;/a&gt;.&lt;br /&gt;&lt;h4 style=&quot;text-align: left;&quot;&gt;Fix Proposal #1&lt;/h4&gt;The proposal is, that &lt;b&gt;independently&lt;/b&gt; on the way Eclipse was started, if user clicks on the &quot;Cancel&quot; button in the &quot;Older Workspace Version&quot; dialog, we &lt;b&gt;always&lt;/b&gt; show the default workspace selection dialog (instead of termination):&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;https://2.bp.blogspot.com/-U2VeCqT6SEk/XN0uJV2m7EI/AAAAAAAAjxA/D5Kdw_JQKiMOmuzCZmfDJ56abEwLBMXSgCLcBGAs/s1600/workspace_selection_dialog.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;https://2.bp.blogspot.com/-U2VeCqT6SEk/XN0uJV2m7EI/AAAAAAAAjxA/D5Kdw_JQKiMOmuzCZmfDJ56abEwLBMXSgCLcBGAs/s1600/workspace_selection_dialog.png&quot; /&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;In this dialog above user has two choices: launch any workspace or finally terminate Eclipse via &quot;Cancel&quot;.&lt;br /&gt;&lt;h4 style=&quot;text-align: left;&quot;&gt;Proposal #1 Matrix&lt;/h4&gt;&lt;h4&gt;A1. If the workbench was not started yet:&lt;/h4&gt;&lt;ol style=&quot;text-align: left;&quot;&gt;&lt;li&gt;If Eclipse was started &lt;b&gt;with or without&lt;/b&gt; &quot;-data&quot; argument and user selects incompatible workspace, Eclipse will show &quot;Older Workspace Version&quot; dialog above and by clicking on &quot;Cancel&quot; it will offer workspace selection dialog. To terminate Eclipse, user has to click &quot;Cancel&quot; in the workspace selection dialog.&lt;/li&gt;&lt;/ol&gt;&lt;h4&gt;B1. If the workbench was started:&lt;/h4&gt;&lt;ol&gt;&lt;li&gt;If user selects &lt;b&gt;compatible&lt;/b&gt; workspace in the &quot;File -&amp;gt; Switch Workspace&quot; dialog, Eclipse restarts fine.&lt;/li&gt;&lt;li&gt;If user selects &lt;b&gt;incompatible&lt;/b&gt; workspace in the &quot;File -&amp;gt; Switch Workspace&quot; dialog, Eclipse restarts, shows the &quot;Older Workspace Version&quot; dialog above and by clicking on &quot;Cancel&quot; it will offer to select another workspace.&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h4&gt;Fix Proposal #2&lt;/h4&gt;The proposal is, that &lt;b&gt;depending&lt;/b&gt; on the way Eclipse was started, if user clicks on the &quot;Cancel&quot; button in the &quot;Older Workspace Version&quot; dialog, we &lt;b&gt;may or may not&lt;/b&gt; show the default workspace selection dialog. So what happens after &quot;Older Workspace Version&quot; dialog is shown is &lt;b&gt;not predictable&lt;/b&gt; by just looking on this dialog - it depends on the &lt;b&gt;history&lt;/b&gt; of this dialog.&lt;br /&gt;&lt;h4 style=&quot;text-align: left;&quot;&gt;Proposal #2 Matrix&lt;/h4&gt;&lt;h4&gt;A2. If the workbench was not started yet:&lt;/h4&gt;&lt;ol style=&quot;text-align: left;&quot;&gt;&lt;li&gt;If Eclipse was started &lt;b&gt;without&lt;/b&gt; &quot;-data&quot; argument and user selects incompatible workspace, Eclipse will show &quot;Older Workspace Version&quot; dialog above and by clicking on &quot;Cancel&quot; it will offer workspace selection dialog.&lt;/li&gt;&lt;li&gt;If Eclipse was started &lt;b&gt;with&lt;/b&gt; &quot;-data&quot; argument pointing to the incompatible workspace, Eclipse will show &quot;Older Workspace Version&quot; dialog above and by clicking on &quot;Cancel&quot; it will &lt;span style=&quot;color: red;&quot;&gt;terminate&lt;/span&gt; (instead of offering to select another workspace).&lt;/li&gt;&lt;/ol&gt;&lt;h4&gt;B2. If the workbench was started:&lt;/h4&gt;&lt;ol&gt;&lt;li&gt;If user selects &lt;b&gt;compatible&lt;/b&gt; workspace in the &quot;File -&amp;gt; Switch Workspace&quot; dialog, Eclipse restarts fine.&lt;/li&gt;&lt;li&gt;If user selects &lt;b&gt;incompatible&lt;/b&gt; workspace in the &quot;File -&amp;gt; Switch Workspace&quot; dialog, Eclipse restarts, shows the &quot;Older Workspace Version&quot; dialog above and by clicking on &quot;Cancel&quot; it will offer to select another workspace.&lt;/li&gt;&lt;/ol&gt;&lt;h4 style=&quot;text-align: left;&quot;&gt;Similarities&lt;/h4&gt;&lt;div&gt;Both proposals fix second bullet in the use case B2.&lt;/div&gt;&lt;h4 style=&quot;text-align: left;&quot;&gt;Differences&lt;/h4&gt;&lt;div&gt;We see that Proposal #1 has no second bullet for A1 case, and is always consistent in the way how UI behaves after clicking on &quot;Cancel&quot; in the &quot;Older Workspace Version&quot; dialog. Proposal #2 fixes only B2 use case, inconsistency in UI behavior for the second part of A1 use case remains.&lt;/div&gt;&lt;h4 style=&quot;text-align: left;&quot;&gt;Technical (biased) notes:&lt;/h4&gt;&lt;ol style=&quot;text-align: left;&quot;&gt;&lt;li&gt;Proposal #1 is implemented and the &lt;a href=&quot;https://git.eclipse.org/r/142139&quot;&gt;patch is available&lt;/a&gt;, along with the &lt;a href=&quot;https://bugs.eclipse.org/bugs/attachment.cgi?id=278605&quot;&gt;demo video&lt;/a&gt;. To test it live, one has to build Eclipse - but here I have &lt;a href=&quot;https://drive.google.com/drive/folders/0B7vALkuico9heWlDMlhfRGlRbm8&quot;&gt;SDK binaries with the patch applied&lt;/a&gt;. The patch is relatively simple and only affects Platform UI internal code.&lt;/li&gt;&lt;li&gt;Proposal #2 is not implemented yet. I assume that this will require more work compared to the patch #1. We will need a new command line argument for Eclipse to differentiate between &quot;&lt;i&gt;I want you not to terminate even if incompatible -data is supplied because I'm calling you from UI&lt;/i&gt;&quot; and &quot;&lt;i&gt;Please terminate if incompatible data is supplied because I'm calling you from the command line&lt;/i&gt;&quot;. A new command line argument for Eclipse means not just Platform UI internal change, but also requires changes in the Equinox and Help, and also means public interface change.&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;&lt;h4&gt;Question to the masses!&lt;/h4&gt;&lt;div&gt;&lt;b&gt;&lt;span style=&quot;color: red; font-size: large;&quot;&gt;We want to know your opinion - which proposal should be implemented?&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Please reply here or on the &lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=538830&quot;&gt;bug 538830&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Thu, 16 May 2019 12:11:53 +0000</pubDate>
	<author>noreply@blogger.com (Andrey Loskutov)</author>
</item>
<item>
	<title>Eclipse Announcements: Eclipse Foundation Launches openMobility Working Group</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/5WJvYhp5s1s/Eclipse-Foundation-Launches-openMobility-Working-Group.html</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/5WJvYhp5s1s/Eclipse-Foundation-Launches-openMobility-Working-Group.html</link>
	<description>Today we announced the launch of the openMobility Working Group that will focus on open and shared collaboration around one of the major issues in urban planning around autonomous vehicles and future transportation requirements.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/5WJvYhp5s1s&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 13 May 2019 22:30:00 +0000</pubDate>
</item>
<item>
	<title>JBoss Tools Team: Quarkus</title>
	<guid isPermaLink="true">https://tools.jboss.org/blog/quarkus.html</guid>
	<link>https://tools.jboss.org/blog/quarkus.html</link>
	<description>&lt;div&gt;&lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;You’ve probably heard about &lt;a href=&quot;https://quarkus.io&quot;&gt;Quarkus&lt;/a&gt;, the Supersonic Subatomic Java framework tailored for Kubernetes and containers.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We wrote an article on how to create your first Quarkus project in an Eclipse based IDE (like &lt;a href=&quot;https://developers.redhat.com/products/codeready-studio/overview&quot;&gt;Red Hat CodeReady Studio&lt;/a&gt;).&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;You can read it at &lt;a class=&quot;bare&quot; href=&quot;https://developers.redhat.com/blog/2019/05/09/create-your-first-quarkus-project-with-eclipse-ide-red-hat-codeready-studio/&quot;&gt;https://developers.redhat.com/blog/2019/05/09/create-your-first-quarkus-project-with-eclipse-ide-red-hat-codeready-studio/&lt;/a&gt;&lt;/p&gt;
      &lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Mon, 13 May 2019 12:23:22 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: The Cloud Native Imperative - Results from the 2019 Jakarta EE Developer Survey</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/u5yxKwK914U/cloud-native-imperative-%E2%80%94-results-2019-jakarta-ee-developer-survey</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/u5yxKwK914U/cloud-native-imperative-%E2%80%94-results-2019-jakarta-ee-developer-survey</link>
	<description>The results of the 2019 Jakarta EE Developer Survey are out. Almost 1,800 Java developers from around the world have spoken.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/u5yxKwK914U&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 10 May 2019 19:00:00 +0000</pubDate>
</item>
<item>
	<title>Mike Milinkovich: The Cloud Native Imperative — Results from the 2019 Jakarta EE Developer Survey</title>
	<guid isPermaLink="false">http://eclipse-foundation.blog/?p=1498</guid>
	<link>https://eclipse-foundation.blog/2019/05/10/results-2019-jakarta-ee-developer-survey/</link>
	<description>&lt;p&gt;The results of the 2019 Jakarta EE Developer Survey are out. Almost 1,800 Java developers from around the world have spoken. Taken together with the engagement and response to my recent posts on the future of Jakarta EE (see my latest blog &lt;a href=&quot;https://eclipse-foundation.blog/2019/05/08/jakarta-ee-8-faq/&quot;&gt;here&lt;/a&gt;), the survey makes clear the developer community is focused on charting a new course for a cloud native future, beginning with delivering Jakarta EE 8. The Java ecosystem has a strong desire to see Jakarta EE, as the successor to Java EE, continue to evolve to support microservices, containers, and multi-cloud portability.&lt;/p&gt;
&lt;p&gt;Organized by the &lt;a href=&quot;https://jakarta.ee/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Jakarta EE Working Group&lt;/a&gt;, the survey was conducted over three weeks in March 2019. Just like last year (see the 2018 results &lt;a href=&quot;http://bit.ly/2BlT3C8&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;), Jakarta EE member companies promoted the survey in partnership with the London Java Community, Java User Groups, and other community stakeholders. Thank you to everyone who took the time to participate. Access the full findings of the survey &lt;a href=&quot;http://bit.ly/2VaHkTH&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Some of the highlights from this year’s survey include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The top three community priorities for Jakarta EE are: better support for microservices, native integration with Kubernetes (tied at 61 percent), followed by production quality reference implementations (37 percent). To move mission-critical Java EE applications and workloads to the cloud, developers will need specifications, tools, and products backed by a diverse vendor community. Jakarta EE Working Group members have committed to deliver multiple compatible implementations of the Jakarta EE 8 Platform when the Jakarta EE 8 specifications are released.&lt;/li&gt;
&lt;li&gt;With a third of developers reporting they are currently building cloud native architectures and another 30 percent planning to within the next year, cloud native is critically important today and will continue to be so;&lt;/li&gt;
&lt;li&gt;The number of Java applications running in the cloud is projected to substantially increase, with 32 percent of respondents expecting that they will be running nearly two-thirds of their Java applications in the cloud within the next two years;&lt;/li&gt;
&lt;li&gt;Microservices dominates as the architecture approach to implementing Java in the cloud, according to 43 percent of respondents;&lt;/li&gt;
&lt;li&gt;Spring/Spring Boot again leads as the framework chosen by most developers for building cloud native applications in Java;&lt;/li&gt;
&lt;li&gt;Eclipse Microprofile’s adoption has surged, with usage growing from 13 percent in 2018 to 28 percent today;&lt;/li&gt;
&lt;li&gt;Java continues to dominate when it comes to deploying applications in production environments. It comes as no surprise that most companies are committed to protecting their past strategic investments in Java.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once again, thanks to everyone who completed the survey and to the community members for their help with the promotion.&lt;/p&gt;
&lt;p&gt;Let me know what you think about this year’s survey findings. We are open to suggestions on how we can improve the survey in the future, so please feel free to share your feedback.&lt;/p&gt;</description>
	<pubDate>Fri, 10 May 2019 15:17:21 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: New Eclipse Foundation Community Survey of Java Developers Shows Cloud Native Adoption Accelerating Dramatically with Jakarta EE</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/44wjFO4huO0/New-Eclipse-Foundation-Community-Survey-of-Java-Developers-Shows-Cloud-Native-Adoption-Accelerating-Dramatically-with-Jakarta-EE.html</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/44wjFO4huO0/New-Eclipse-Foundation-Community-Survey-of-Java-Developers-Shows-Cloud-Native-Adoption-Accelerating-Dramatically-with-Jakarta-EE.html</link>
	<description>Eclipse Foundation enterprise Java survey shows cloud deployments increasing over 2018 findings with 62% of Java developers building cloud native architectures now or within the year&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/44wjFO4huO0&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 09 May 2019 19:00:00 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Eclipse Contributor Agreement 3.0</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/nM_0HQJ23Iw/eclipse-contributor-agreement-30</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/nM_0HQJ23Iw/eclipse-contributor-agreement-30</link>
	<description>The Eclipse Foundation's IP Team has been working hard to get the various agreements that we maintain between the Eclipse Foundation and community updated.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/nM_0HQJ23Iw&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 08 May 2019 15:00:00 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Frequently Asked Questions About Jakarta EE 8</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/eUfMVflBsMM/frequently-asked-questions-about-jakarta-ee-8</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/eUfMVflBsMM/frequently-asked-questions-about-jakarta-ee-8</link>
	<description>Have questions about Jakarta EE 8? Check out Mike Milinkovich's newest FAQ blog!&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/eUfMVflBsMM&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 08 May 2019 15:00:00 +0000</pubDate>
</item>
<item>
	<title>Mike Milinkovich: Frequently Asked Questions About Jakarta EE 8</title>
	<guid isPermaLink="false">http://eclipse-foundation.blog/?p=1495</guid>
	<link>https://eclipse-foundation.blog/2019/05/08/jakarta-ee-8-faq/</link>
	<description>&lt;p&gt;I’d like to thank the community for the level of engagement we’ve seen in response to my &lt;a href=&quot;https://eclipse-foundation.blog/2019/05/03/jakarta-ee-java-trademarks/&quot;&gt;post&lt;/a&gt; from last week.   This post, which again represents the consensus view of the Jakarta EE Steering Committee, answers some questions about Jakarta EE 8, which is planned as the initial release of Jakarta EE, and is intended to be fully compatible with Java EE 8, including use of the javax namespace.   We thought it would be useful to reiterate the messages we have been delivering about this release.&lt;/p&gt;
&lt;p&gt;Note that this post is &lt;b&gt;not&lt;/b&gt; about future Jakarta releases where the namespace will be changed. There is a vigorous discussion going on right now on the &lt;a href=&quot;https://accounts.eclipse.org/mailing-list/jakartaee-platform-dev&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;jakarta-platform-dev@eclipse.org&lt;/a&gt; list (&lt;a href=&quot;http://dev.eclipse.org/mhonarc/lists/jakartaee-platform-dev&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;archive&lt;/a&gt;), so if you are interested in that topic, I would suggest you participate there. We expect that it will be about a month before the Jakarta EE Spec Committee will determine the next steps in the Jakarta EE roadmap.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Will Jakarta EE 8 break existing Java EE applications that rely upon javax APIs?&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;No, Jakarta EE 8 will not break existing existing Java EE applications that rely upon javax APIs.   We expect Jakarta EE 8 to be completely compatible with Java EE 8. We expect Jakarta EE 8 to specify the same javax namespace, and the same javax APIs and the same behavior as is specified in Java EE 8.    We expect that implementations that pass the Java EE 8 TCKs will also pass the Jakarta EE 8 TCKs, because the Jakarta EE 8 TCKs will be based on the same sources as the Java EE 8 TCKs. Jakarta EE 8 will not require any changes to Java EE 8 applications or their use of javax APIs.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;What will Jakarta EE 8 consist of?&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;The Jakarta EE 8 specifications will:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Be fully compatible with Java EE 8 specifications&lt;/li&gt;
&lt;li&gt;Include the same APIs and Javadoc using the same javax namespace&lt;/li&gt;
&lt;li&gt;Provide open source licensed Jakarta EE 8 TCKs that are based on, and fully compatible with, the Java EE 8 TCKs.&lt;/li&gt;
&lt;li&gt;Include a Jakarta EE 8 Platform specification that will describe the same platform integration requirements as the Java EE 8 Platform specification.&lt;/li&gt;
&lt;li&gt;Reference multiple compatible  implementations of the Jakarta EE 8 Platform when the Jakarta EE 8 specifications are released.&lt;/li&gt;
&lt;li&gt;Provide a compatibility and branding process for demonstrating that implementations are Jakarta EE 8 compatible.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;Will there be Jakarta EE 8 compatible implementations?&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Yes.  Multiple compatible implementations of the Jakarta EE 8 Platform will be available when the Jakarta EE 8 specifications are released.  We expect that any Java EE 8 compatible implementation would also be Jakarta EE 8 compatible, and the vendors in the Jakarta EE Working Group intend to certify their Java EE 8 compatible implementations as Jakarta EE 8 compatible.  In addition, because the Jakarta EE TCKs are available under an open source license, we will “lower the bar” for other technology providers to demonstrate Jakarta EE compatibility for their implementations. The lower cost and more liberal Jakarta EE trademark licensing will allow more technology providers to leverage and strengthen the Jakarta EE brand in the Enterprise Java community.  Jakarta EE 8 will provide a new baseline for the evolution of the Jakarta EE technologies, under an open, vendor-neutral community-driven process.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;What is the process for delivery of Jakarta EE 8&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;The process for delivery of Jakarta EE 8 specifications will be fully transparent and will follow the Jakarta EE Specification Process.  Expect to see in coming weeks the delivery of initial, draft Jakarta EE 8 component specifications corresponding to Java EE 8 component specifications.  These will contain Javadoc defining the relevant APIs, and TCKs for compatibility testing. To publish specification text, we need to acquire copyright licenses for this text.  We have obtained Oracle and IBM’s copyright licenses for their  contributions, and intend to obtain the remaining copyright licenses required to publish the text of the Jakarta EE 8 Platform specification, and as much as possible of the component specifications. If you contributed to the Java EE specifications at the JCP in the past, expect to be contacted by the Eclipse Foundation to provide a license to use your contributions in Jakarta EE going forward. Providing such a license will be an important step in supporting the new specification process and the Jakarta EE community.  You will see these draft specifications evolve to final specifications in an open community process. Join the specification projects and participate!&lt;/p&gt;
&lt;p&gt;&lt;b&gt;When will Jakarta EE 8 be delivered?&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;The Jakarta EE Working Group intends to release final Jakarta EE 8 specifications by the fall of 2019.    This is an open community-driven effort, so there will be transparency into the process of driving the Jakarta EE 8 specifications, delivery of the Jakarta EE 8 TCKs, and Jakarta EE 8 compatible implementations.&lt;/p&gt;</description>
	<pubDate>Wed, 08 May 2019 12:00:22 +0000</pubDate>
</item>

</channel>
</rss>
